//so2al postive w negative edge
int pos(int reading)
{
    static int old=0,counter=0;
    if(old==0&&reading==1)
    {
        counter++;
    }
    old=reading;
    return counter;

}


//so2al el array
int au8outputarray[256];
int* vidPrintReverseInclusive(int u8LowerNumber,int u8UpperNumber,int* result_size)
{
    int k=0;
    int i=0;
    int count=0;
    if(u8UpperNumber<u8LowerNumber)
    {
        *result_size=2;
        au8OutputArray[0]=0xff;
        au8OutputArray[1]=0xff;

    }
    else
    {
        for(k=u8UpperNumber;k>=u8LowerNumber;k--,i++)
            au8OutputArray[i]=k;
            *result_size=i;

    }
    return au8OutputArray;
}




//power of 3
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
u8IsPowerOfThree(unsigned int u32Number);
int main()
{
printf("%d",u8IsPowerOfThree(125));
return 0;
}

int u8IsPowerOfThree(unsigned int u32Number)
{
    int base;
    unsigned int value=0;
    int answer=1;
    for(base=1;value<u32Number; base++)
    {
        value=(int)(pow(base,3)+.5);
        if(value==u32Number)
            answer=0;
    }
    return answer;
}


//// c function clears specefied bit in a given number

unsigned int u32clearbit(unsigned int u32number,unsigned int u8bitnumber)
{
return(u32number & ~((unsigned int)1<<u8bitnumber));
}


//how many ones in a number

int u8CountOnes(unsigned int u32InputNumber)
{
    char i;
    int count=0;
    for(i=0;i<32;i++)
    {
        if((u32InputNumber>>i)&1)
            count++;
    }
    return count;
}




//function power of 2

int * IsPowerOf2(int nums_size,int* nums,int* result_size)
{


    //*result_size=num_size;
    int  *array_res;
    array_res=(int*)calloc(nums_size,sizeof(int));
    int k=0,i=0;
    int value=0;
    for(i=0;i<nums_size;i++)
    {
        if(nums[i]==0)
             array_res[i]=0;
        else
        {

            for(k=1;value<nums[i];k++)
            {
                value=(int)(pow(2,k)+.5);
                if(nums[i]==value)
                array_res[i]=1;
               // printf("\n%d    ",value);
            }
              //printf("%d    ",value);
              value=0;
        }
        printf("%d\n",array_res[i]);
    }
    *result_size=nums_size;
    return array_res;
}


////odd or even

int checkevenorodd(unsigned int u32inputnumber)
{
if(u32inputnumber%2)
return 1;
else
return 0;
}





//find most occuring

int s32findmostoccuring(int as32array_size,int* as32array)
{
int i=0;
int max=1;
int counting=;
int num=;
for(i=1;i<as32array_size;i++)
{
if(as32array[i-1]==as32array[i])
{
counting++;
if(counting>=max)
{
max=counting;
num=as32array[i-1];
}
}
else
{
if(counting>=max)
{
max=counting;
num=as32array[i-2];
}
counting=1;
}
}
return num;
}


////falling sdge counter

uint32 fallingedgecounter(uint8 pinreading)
{
static int old=0,counter=0;
if(old==1 && pinreading==0)
{
counter++;
}
old= pin reading;
return counter;
}


////rising edge value

uint8 oldval=0;
uint32 risingedgecounter(uint8 pinreading)
{
uint8 newval;
static uint32 countnumber=0;
newval=pinreading;
if((oldval==0)&&(newval==1))
countnumber++;
oldval=newval;
return countnumber;
}


////function give 0 when power of 3 and 1 otherwise

int u8ispowerofthree(unsigned int u32number)
{
int g=0;
for(int i=1;g<=32number;i++)
{
g=pow(3,i);
if(g==u32number)
{
return 0;
}
}
return 1;
}






